const tini=function(){const{match:a}=require("path-to-regexp"),b=b=>a(b,{decode:decodeURIComponent});let c={};const d=async a=>{const b=c[a.method]||[],d=new URL(a.url);for(const{matcher:c,callbacks:f}of b){const b=c(d.pathname);if(b){a.pathname=d.pathname,a.params=b.params,a.query=e(d.searchParams);for(const b of f){const c=await Promise.resolve(b(a));if(void 0!==c){if(c instanceof Response)return c;if("string"==typeof c)return new Response(c);const a=new Headers;return a.append("Content-Type","application/json"),new Response(JSON.stringify(c),{headers:a})}}}}return new Response("Not Found",{status:404})},e=a=>{const b={};for(const c of a.keys()){const d=a.getAll(c);b[c]=1<d.length?d:d[0]}return b},f=(a,d,e)=>{c[a]=(c[a]||[]).concat({matcher:b(d),callbacks:e})},g={get:(a,...b)=>f("GET",a,b),post:(a,...b)=>f("POST",a,b),put:(a,...b)=>f("PUT",a,b),del:(a,...b)=>f("DELETE",a,b),use:(a,b,...c)=>f(a,b,c)};let h=!1;return a=>{addEventListener("fetch",b=>{h||(a(g),h=!0),b.respondWith(d(b.request))})}}();